{"ast":null,"code":"import _classCallCheck from \"/Users/nha/Plugged/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nha/Plugged/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nha/Plugged/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nha/Plugged/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nha/Plugged/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/nha/Plugged/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/nha/Plugged/frontend/src/components/Inbox.js\";\nimport React, { Component } from 'react';\nimport Messages from './Messages';\nimport ChatInput from './ChatInput';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport Divider from '@material-ui/core/Divider';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button/Button';\nimport Avatar from '@material-ui/core/Avatar';\n\nrequire('../styles/Inbox.css');\n\nvar drawerWidth = 240;\nvar messages = [{\n  username: 'davematthews',\n  message: 'Hey how are you?',\n  fromMe: true\n}, {\n  username: 'johnwick',\n  message: 'Not bad, wanna jam?',\n  fromMe: false\n}, {\n  username: 'davematthews',\n  message: 'Sure, coming soon.',\n  fromMe: true\n}, {\n  username: 'johnwick',\n  message: 'Great, see you soon!',\n  fromMe: false\n}];\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      display: \"flex\"\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      zIndex: 0\n    },\n    drawerPaper: {\n      width: drawerWidth\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing.unit * 3\n    },\n    toolbar: theme.mixins.toolbar\n  };\n};\n\nvar Inbox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Inbox, _Component);\n\n  function Inbox(props) {\n    var _this;\n\n    _classCallCheck(this, Inbox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Inbox).call(this, props));\n\n    _this.handleClickOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.state = {\n      me: {\n        id: '',\n        name: '',\n        avatar: ''\n      },\n      current: {\n        id: '',\n        name: 'Inbox',\n        email: ''\n      },\n      connections: [],\n      messages: messages,\n      open: false\n    };\n    _this.sendHandler = _this.sendHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newChat = _this.newChat.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.switchMsg = _this.switchMsg.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getFriends = _this.getFriends.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Inbox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (!this.props.auth.isAuthenticated) {\n        this.props.history.push('/');\n      }\n\n      axios.get('/api/users/me').then(function (res) {\n        _this2.setState({\n          me: {\n            id: res.data.id,\n            name: res.data.name,\n            avatar: res.data.avatar\n          }\n        });\n      });\n      this.getFriends();\n    }\n  }, {\n    key: \"getFriends\",\n    value: function getFriends() {\n      var _this3 = this;\n\n      axios.get('/api/users/me/connections').then(function (res) {\n        var connections = res.data.connections.map(function (element) {\n          return axios.get(\"/api/users/\".concat(element._id)).then(function (response) {\n            return response.data;\n          });\n        });\n        Promise.all(connections).then(function (users) {\n          console.log(users);\n\n          _this3.setState({\n            connections: users\n          });\n\n          _this3.switchMsg(_this3.state.connections[0]);\n\n          _this3.forceUpdate();\n        });\n      });\n    }\n  }, {\n    key: \"sendHandler\",\n    value: function sendHandler(message) {\n      var _this4 = this;\n\n      axios.post('/api/messages/add', {\n        message: message,\n        id: this.state.current.id\n      }).then(function (res) {\n        console.log(res.data);\n\n        _this4.forceUpdate();\n      });\n    }\n  }, {\n    key: \"newChat\",\n    value: function newChat() {\n      axios.post('/api/messages/add/user', {\n        email: this.state.current.email\n      }).then(function (res) {\n        console.log(res.data);\n      });\n    }\n  }, {\n    key: \"switchMsg\",\n    value: function switchMsg(e) {\n      var _this5 = this;\n\n      console.log(e);\n      axios.post('/api/messages/get', {\n        id: e.id\n      }).then(function (res) {\n        _this5.setState({\n          current: {\n            id: e.id,\n            name: e.name\n          }\n        });\n\n        var me = _this5.state.me;\n        var newMessages = res.data.reverse().map(function (element) {\n          var message = {\n            message: element.message.text,\n            username: '',\n            fromMe: false\n          };\n\n          if (element.sender == me.id) {\n            message.fromMe = true;\n          } else {\n            message.username = e.name;\n          }\n\n          return message;\n        });\n\n        _this5.setState({\n          messages: newMessages\n        });\n      });\n    }\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(e) {\n      this.setState({\n        current: {\n          email: e.target.value\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var classes = this.props.classes;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(CssBaseline, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(Drawer, {\n        className: classes.drawer,\n        variant: \"permanent\",\n        classes: {\n          paper: \"drawerPaper\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.toolbar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(ListItem, {\n        button: true,\n        key: \"New\",\n        onClick: this.handleClickOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(MailIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: \"New\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }))), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, this.state.connections.map(function (_ref) {\n        var id = _ref.id,\n            name = _ref.name,\n            avatar = _ref.avatar;\n        return React.createElement(ListItem, {\n          button: true,\n          key: id,\n          onClick: function onClick() {\n            return _this6.switchMsg({\n              id: id,\n              name: name\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, React.createElement(ListItemIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          alt: \"User pic\",\n          src: avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        })), React.createElement(ListItemText, {\n          primary: name,\n          style: {\n            paddingRight: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }));\n      }))), React.createElement(Paper, {\n        className: classes.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, this.state.current.name)), React.createElement(\"div\", {\n        className: \"container inbox-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        onSend: this.sendHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        onChange: this.handleInputChange,\n        \"aria-labelledby\": \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Enter email\"), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"What's the email of the person you want to connect to?\"), React.createElement(TextField, {\n        autoFocus: true,\n        margin: \"dense\",\n        id: \"name\",\n        label: \"Email Address\",\n        type: \"email\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        onClick: this.newChat,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"Add\"))))));\n    }\n  }]);\n\n  return Inbox;\n}(Component);\n\nInbox.defaultProps = {\n  username: 'Anonymous'\n};\nInbox.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nexport default connect(mapStateToProps, {})(withStyles(styles)(Inbox));","map":{"version":3,"sources":["/Users/nha/Plugged/frontend/src/components/Inbox.js"],"names":["React","Component","Messages","ChatInput","Drawer","List","ListItem","ListItemIcon","ListItemText","InboxIcon","MailIcon","Divider","CssBaseline","Paper","PropTypes","connect","withStyles","axios","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","Avatar","require","drawerWidth","messages","username","message","fromMe","styles","theme","root","display","appBar","zIndex","drawer","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","unit","toolbar","mixins","Inbox","props","handleClickOpen","setState","open","handleClose","state","me","id","name","avatar","current","email","connections","sendHandler","bind","newChat","handleInputChange","switchMsg","getFriends","auth","isAuthenticated","history","push","get","then","res","data","map","element","_id","response","Promise","all","users","console","log","forceUpdate","post","e","newMessages","reverse","text","sender","target","value","classes","paper","paddingRight","header","defaultProps","propTypes","object","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Messages from './Messages';\r\nimport ChatInput from './ChatInput';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nrequire('../styles/Inbox.css');\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst messages = [\r\n  {username: 'davematthews', message: 'Hey how are you?', fromMe: true},\r\n  {username: 'johnwick', message: 'Not bad, wanna jam?', fromMe: false},\r\n  {username: 'davematthews', message: 'Sure, coming soon.', fromMe: true},\r\n  {username: 'johnwick', message: 'Great, see you soon!', fromMe: false},\r\n]\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    zIndex: 0\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.unit * 3\r\n  },\r\n  toolbar: theme.mixins.toolbar\r\n});\r\n\r\nclass Inbox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      me: {id: '', name: '', avatar: ''},\r\n      current: {id: '', name: 'Inbox', email: ''},\r\n      connections: [],\r\n      messages: messages,\r\n      open: false\r\n    };\r\n    this.sendHandler = this.sendHandler.bind(this);\r\n    this.newChat = this.newChat.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.switchMsg = this.switchMsg.bind(this);\r\n    this.getFriends = this.getFriends.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n      if(!this.props.auth.isAuthenticated) {\r\n          this.props.history.push('/');\r\n      }\r\n      axios.get('/api/users/me')\r\n          .then(res => {\r\n            this.setState({\r\n              me: {\r\n                id: res.data.id,\r\n                name: res.data.name,\r\n                avatar: res.data.avatar\r\n              }\r\n            });\r\n          });\r\n        this.getFriends();\r\n  }\r\n\r\n  getFriends() {\r\n    axios.get('/api/users/me/connections')\r\n        .then(res => {\r\n          let connections = (res.data.connections).map(function (element) {\r\n            return axios.get(`/api/users/${element._id}`)\r\n              .then(response => {\r\n                return response.data;\r\n              })\r\n          });\r\n          Promise.all(connections).then(users => {\r\n            console.log(users);\r\n            this.setState({connections: users});\r\n            this.switchMsg(this.state.connections[0]);\r\n            this.forceUpdate();\r\n          });\r\n        });\r\n  }\r\n\r\n  sendHandler(message) {\r\n    axios.post('/api/messages/add', {message: message, id: this.state.current.id})\r\n        .then(res => {\r\n          console.log(res.data);\r\n          this.forceUpdate();\r\n        })\r\n  }\r\n\r\n  newChat() {\r\n    axios.post('/api/messages/add/user', {email: this.state.current.email})\r\n        .then(res => {\r\n          console.log(res.data);\r\n        })\r\n  }\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  switchMsg(e) {\r\n    console.log(e);\r\n    axios.post('/api/messages/get', {id: e.id})\r\n        .then(res => {\r\n          this.setState({current: {id: e.id, name: e.name}});\r\n          let me = this.state.me;\r\n          let newMessages = ((res.data).reverse()).map(function (element) {\r\n            let message = {message: element.message.text, username: '', fromMe: false};\r\n            if (element.sender == me.id) {\r\n              message.fromMe = true;\r\n            } else {\r\n              message.username = e.name;\r\n            }\r\n            return message;\r\n          })\r\n          this.setState({messages: newMessages});\r\n        });\r\n  }\r\n\r\n  handleInputChange(e) {\r\n      this.setState({\r\n          current: {email: e.target.value}\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n      return (\r\n        <React.Fragment>\r\n        <CssBaseline />\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant=\"permanent\"\r\n          classes={{\r\n            paper: \"drawerPaper\",\r\n          }}\r\n        >\r\n        <div className={classes.toolbar} />\r\n          <List>\r\n            <ListItem button key=\"New\" onClick={this.handleClickOpen}>\r\n              <ListItemIcon><MailIcon /></ListItemIcon>\r\n              <ListItemText primary='New' />\r\n            </ListItem>\r\n          </List>\r\n          <Divider />\r\n          <List>\r\n            {(this.state.connections).map(({id, name, avatar}) => (\r\n              <ListItem button key={id} onClick={() => this.switchMsg({id: id, name: name})}>\r\n                <ListItemIcon><Avatar alt=\"User pic\" src={avatar}/></ListItemIcon>\r\n                <ListItemText primary={name} style={{paddingRight: 0}} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Drawer>\r\n        <Paper className={classes.paper}>\r\n          <div className={classes.header}>\r\n              <h3>{this.state.current.name}</h3>\r\n          </div>\r\n          <div className=\"container inbox-container\">\r\n          <Messages messages={this.state.messages} />\r\n          <ChatInput onSend={this.sendHandler} />\r\n          <Dialog\r\n            open={this.state.open}\r\n            onClose={this.handleClose}\r\n            onChange={this.handleInputChange}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">Enter email</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                What's the email of the person you want to connect to?\r\n              </DialogContentText>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Email Address\"\r\n                type=\"email\"\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={this.newChat} color=\"primary\">\r\n                Add\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      </Paper>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nInbox.defaultProps = {\r\n  username: 'Anonymous'\r\n};\r\n\r\nInbox.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, {  })(withStyles(styles)(Inbox));\r\n"]},"metadata":{},"sourceType":"module"}